{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/mern-artwalk-/client/src/pages/UserArtwalkPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { useToken } from '../auth/useToken';\nimport { useUser } from '../auth/useUser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserArtwalkPage = () => {\n  _s();\n\n  const user = useUser();\n  const [token, setToken] = useToken();\n  const {\n    id,\n    email,\n    artwalks\n  } = user; // We'll use the history to navigate the user\n  // programmatically later on (we're not using it yet)\n\n  const history = useHistory(); // These states are bound to the values of the text inputs\n  // on the page (see JSX below). \n\n  const [name, setName] = useState(artwalks.name || '');\n  const [bilds, setBilds] = useState(artwalks.bilds || ''); // These state variables control whether or not we show\n  // the success and error message sections after making\n  // a network request (see JSX below).\n\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false); // This useEffect hook automatically hides the\n  // success and error messages after 3 seconds when they're shown.\n  // Just a little user interface improvement.\n\n  useEffect(() => {\n    if (showSuccessMessage || showErrorMessage) {\n      setTimeout(() => {\n        setShowSuccessMessage(false);\n        setShowErrorMessage(false);\n      }, 3000);\n    }\n  }, [showSuccessMessage, showErrorMessage]);\n\n  const saveChanges = async () => {\n    try {\n      const response = await axios.put(`/api/users/${id}`, {\n        name,\n        bilds\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const {\n        token: newToken\n      } = response.data;\n      setToken(newToken);\n      setShowSuccessMessage(true);\n    } catch (error) {\n      setShowErrorMessage(true);\n    }\n  };\n\n  const logOut = () => {\n    // We'll want to log the user out here\n    // and send them to the \"login page\"\n    alert('Log out functionality not implemented yet');\n  };\n\n  const resetValues = () => {\n    setName(artwalks.name);\n    setBilds(artwalks.bilds);\n  }; // And here we have the JSX for our component. It's pretty straightforward\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Info for \", email]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), showSuccessMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success\",\n      children: \"Successfully saved user data!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 36\n    }, this), showErrorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fail\",\n      children: \"Uh oh... something went wrong and we couldn't save changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setName(e.target.value),\n        value: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Bild:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setBilds(e.target.value),\n        value: bilds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveChanges,\n      children: \"Save Changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetValues,\n      children: \"Reset Values\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: logOut,\n      children: \"Log Out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserArtwalkPage, \"ifgZVWMEOb1/3pbbwfIHLlNBSmY=\", false, function () {\n  return [useUser, useToken, useHistory];\n});\n\n_c = UserArtwalkPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserArtwalkPage\");","map":{"version":3,"sources":["/Users/admin/Desktop/mern-artwalk-/client/src/pages/UserArtwalkPage.js"],"names":["useState","useEffect","useHistory","axios","useToken","useUser","UserArtwalkPage","user","token","setToken","id","email","artwalks","history","name","setName","bilds","setBilds","showSuccessMessage","setShowSuccessMessage","showErrorMessage","setShowErrorMessage","setTimeout","saveChanges","response","put","headers","Authorization","newToken","data","error","logOut","alert","resetValues","e","target","value"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AACjC,QAAMC,IAAI,GAAGF,OAAO,EAApB;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,EAAlC;AAEA,QAAM;AAAEM,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA;AAAb,MAA0BL,IAAhC,CAJiC,CAMjC;AACA;;AACA,QAAMM,OAAO,GAAGX,UAAU,EAA1B,CARiC,CAUjC;AACA;;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAACY,QAAQ,CAACE,IAAT,IAAiB,EAAlB,CAAhC;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAACY,QAAQ,CAACI,KAAT,IAAkB,EAAnB,CAAlC,CAbiC,CAejC;AACA;AACA;;AACA,QAAM,CAACE,kBAAD,EAAqBC,qBAArB,IAA8CnB,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACoB,gBAAD,EAAmBC,mBAAnB,IAA0CrB,QAAQ,CAAC,KAAD,CAAxD,CAnBiC,CAqBjC;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIiB,kBAAkB,IAAIE,gBAA1B,EAA4C;AACxCE,MAAAA,UAAU,CAAC,MAAM;AACbH,QAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAE,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH,OAHS,EAGP,IAHO,CAAV;AAIH;AACJ,GAPQ,EAON,CAACH,kBAAD,EAAqBE,gBAArB,CAPM,CAAT;;AASA,QAAMG,WAAW,GAAG,YAAY;AAC5B,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAN,CAAW,cAAaf,EAAG,EAA3B,EAA8B;AACjDI,QAAAA,IADiD;AAEjDE,QAAAA;AAFiD,OAA9B,EAGpB;AACCU,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAG,UAASnB,KAAM;AAAjC;AADV,OAHoB,CAAvB;AAOA,YAAM;AAAEA,QAAAA,KAAK,EAAEoB;AAAT,UAAsBJ,QAAQ,CAACK,IAArC;AACApB,MAAAA,QAAQ,CAACmB,QAAD,CAAR;AACAT,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACH,KAXD,CAWE,OAAOW,KAAP,EAAc;AACZT,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH;AACJ,GAfD;;AAiBA,QAAMU,MAAM,GAAG,MAAM;AACjB;AACA;AACAC,IAAAA,KAAK,CAAC,2CAAD,CAAL;AACH,GAJD;;AAMA,QAAMC,WAAW,GAAG,MAAM;AACtBlB,IAAAA,OAAO,CAACH,QAAQ,CAACE,IAAV,CAAP;AACAG,IAAAA,QAAQ,CAACL,QAAQ,CAACI,KAAV,CAAR;AACH,GAHD,CAxDiC,CA6DjC;;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACI;AAAA,8BAAcL,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKO,kBAAkB,iBAAI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAF3B,EAGKE,gBAAgB,iBAAI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHzB,eAII;AAAA,wCAEI;AACI,QAAA,QAAQ,EAAEc,CAAC,IAAInB,OAAO,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAD1B;AAEI,QAAA,KAAK,EAAEtB;AAFX;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAUI;AAAA,uCAEI;AACI,QAAA,QAAQ,EAAEoB,CAAC,IAAIjB,QAAQ,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV,CAD3B;AAEI,QAAA,KAAK,EAAEpB;AAFX;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,eAgBI;AAAA;AAAA;AAAA;AAAA,YAhBJ,eAiBI;AAAQ,MAAA,OAAO,EAAEO,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBJ,eAkBI;AAAQ,MAAA,OAAO,EAAEU,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBJ,eAmBI;AAAQ,MAAA,OAAO,EAAEF,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH,CArFM;;GAAMzB,e;UACID,O,EACaD,Q,EAMVF,U;;;KARPI,e","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { useToken } from '../auth/useToken';\nimport { useUser } from '../auth/useUser';\n\nexport const UserArtwalkPage = () => {\n    const user = useUser();\n    const [token, setToken] = useToken();\n\n    const { id, email, artwalks } = user;\n\n    // We'll use the history to navigate the user\n    // programmatically later on (we're not using it yet)\n    const history = useHistory();\n\n    // These states are bound to the values of the text inputs\n    // on the page (see JSX below). \n    const [name, setName] = useState(artwalks.name || '');\n    const [bilds, setBilds] = useState(artwalks.bilds || '');\n\n    // These state variables control whether or not we show\n    // the success and error message sections after making\n    // a network request (see JSX below).\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n    const [showErrorMessage, setShowErrorMessage] = useState(false);\n\n    // This useEffect hook automatically hides the\n    // success and error messages after 3 seconds when they're shown.\n    // Just a little user interface improvement.\n    useEffect(() => {\n        if (showSuccessMessage || showErrorMessage) {\n            setTimeout(() => {\n                setShowSuccessMessage(false);\n                setShowErrorMessage(false);\n            }, 3000);\n        }\n    }, [showSuccessMessage, showErrorMessage]);\n\n    const saveChanges = async () => {\n        try {\n            const response = await axios.put(`/api/users/${id}`, {\n                name,\n                bilds,\n            }, {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n\n            const { token: newToken } = response.data;\n            setToken(newToken);\n            setShowSuccessMessage(true);\n        } catch (error) {\n            setShowErrorMessage(true);\n        }\n    }\n\n    const logOut = () => {\n        // We'll want to log the user out here\n        // and send them to the \"login page\"\n        alert('Log out functionality not implemented yet');\n    }\n    \n    const resetValues = () => {\n        setName(artwalks.name);\n        setBilds(artwalks.bilds);\n    }\n    \n    // And here we have the JSX for our component. It's pretty straightforward\n    return (\n        <div className=\"content-container\">\n            <h1>Info for {email}</h1>\n            {showSuccessMessage && <div className=\"success\">Successfully saved user data!</div>}\n            {showErrorMessage && <div className=\"fail\">Uh oh... something went wrong and we couldn't save changes</div>}\n            <label>\n                Title:\n                <input\n                    onChange={e => setName(e.target.value)}\n                    value={name} />\n            </label>\n            <label>\n                Bild:\n                <input\n                    onChange={e => setBilds(e.target.value)}\n                    value={bilds} />\n            </label>\n            <hr />\n            <button onClick={saveChanges}>Save Changes</button>\n            <button onClick={resetValues}>Reset Values</button>\n            <button onClick={logOut}>Log Out</button>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}