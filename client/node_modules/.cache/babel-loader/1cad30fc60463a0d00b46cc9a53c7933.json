{"ast":null,"code":"var _s = $RefreshSig$();\n\n/*\n    This is just a nice custom hook that we can\n    use to get all the query parameters from inside\n    our components. Don't worry about the details\n    unless you're curious :)\n*/\nimport { useLocation } from 'react-router-dom';\n\nconst pairs = arr => arr.reduce((acc, x, i) => {\n  if (i % 2 === 0) {\n    return [...acc, [x]];\n  } else {\n    const last = acc[acc.length - 1];\n    const everythingElse = acc.slice(0, acc.length - 1);\n    return [...everythingElse, [...last, x]];\n  }\n}, [])[0] || [];\n\nconst fold = arr => pairs(arr).reduce((acc, pair) => {\n  return { ...acc,\n    [pair[0]]: pair[1]\n  };\n}, {});\n\nexport const useQueryParams = () => {\n  _s();\n\n  const location = useLocation();\n  const currentParamsObj = new URLSearchParams(location.search);\n  const params = fold([...currentParamsObj.entries()]);\n  return params;\n};\n\n_s(useQueryParams, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});","map":{"version":3,"sources":["/Users/admin/Desktop/artwalkkonzept-auth-aws/artwalkkonzept-auth-aws-google_13.10.21/client/src/util/useQueryParams.js"],"names":["useLocation","pairs","arr","reduce","acc","x","i","last","length","everythingElse","slice","fold","pair","useQueryParams","location","currentParamsObj","URLSearchParams","search","params","entries"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA,MAAMC,KAAK,GAAGC,GAAG,IAAIA,GAAG,CAACC,MAAJ,CAAW,CAACC,GAAD,EAAMC,CAAN,EAASC,CAAT,KAAe;AAC3C,MAAIA,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACb,WAAO,CAAC,GAAGF,GAAJ,EAAS,CAACC,CAAD,CAAT,CAAP;AACH,GAFD,MAEO;AACH,UAAME,IAAI,GAAGH,GAAG,CAACA,GAAG,CAACI,MAAJ,GAAa,CAAd,CAAhB;AACA,UAAMC,cAAc,GAAGL,GAAG,CAACM,KAAJ,CAAU,CAAV,EAAaN,GAAG,CAACI,MAAJ,GAAa,CAA1B,CAAvB;AACA,WAAO,CAAC,GAAGC,cAAJ,EAAoB,CAAC,GAAGF,IAAJ,EAAUF,CAAV,CAApB,CAAP;AACH;AACJ,CARoB,EAQlB,EARkB,EAQd,CARc,KAQR,EARb;;AAUA,MAAMM,IAAI,GAAGT,GAAG,IAAID,KAAK,CAACC,GAAD,CAAL,CAAWC,MAAX,CAAkB,CAACC,GAAD,EAAMQ,IAAN,KAAe;AACjD,SAAO,EACH,GAAGR,GADA;AAEH,KAACQ,IAAI,CAAC,CAAD,CAAL,GAAWA,IAAI,CAAC,CAAD;AAFZ,GAAP;AAIH,CALmB,EAKjB,EALiB,CAApB;;AAOA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAChC,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAMe,gBAAgB,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,CAAzB;AACA,QAAMC,MAAM,GAAGP,IAAI,CAAC,CAAC,GAAGI,gBAAgB,CAACI,OAAjB,EAAJ,CAAD,CAAnB;AAEA,SAAOD,MAAP;AACH,CANM;;GAAML,c;UACQb,W","sourcesContent":["/*\n    This is just a nice custom hook that we can\n    use to get all the query parameters from inside\n    our components. Don't worry about the details\n    unless you're curious :)\n*/\n\nimport { useLocation } from 'react-router-dom';\n\nconst pairs = arr => arr.reduce((acc, x, i) => {\n    if (i % 2 === 0) {\n        return [...acc, [x]];\n    } else {\n        const last = acc[acc.length - 1];\n        const everythingElse = acc.slice(0, acc.length - 1);\n        return [...everythingElse, [...last, x]];\n    }\n}, [])[0] || [];\n\nconst fold = arr => pairs(arr).reduce((acc, pair) => {\n    return {\n        ...acc,\n        [pair[0]]: pair[1],\n    }\n}, {});\n\nexport const useQueryParams = () => {\n    const location = useLocation();\n    const currentParamsObj = new URLSearchParams(location.search);\n    const params = fold([...currentParamsObj.entries()]);\n\n    return params;\n}"]},"metadata":{},"sourceType":"module"}